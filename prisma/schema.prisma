generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId         Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  password       String
  status         Status?          @default(ACTIVE)
  role           UserRole?        @default(ADMIN)
  token          String?
  phone          String?
  address        String?
  schoolId       Int?
  school         Sekolah?         @relation(fields: [schoolId], references: [schoolid])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  HistorySubject HistorySubject[]
  HistoryTeacher HistoryTeacher[]
}

model Sekolah {
  schoolid       Int              @id @default(autoincrement())
  nama_sekolah   String
  address        String?
  npsn           String
  type           SchoolType?      @default(SMA)
  schoolStatus   SchoolStatus?    @default(NEGERI)
  kurikulum      String?
  phone          String?
  email          String?          @unique
  website        String?
  logo           String?
  status         Status?          @default(ACTIVE)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  User           User[]
  Student        Student[]
  Grade          Grade[]
  Subject        Subject[]
  Teacher        Teacher[]
  Schedule       Schedule[]
  HistorySubject HistorySubject[]
  HistoryTeacher HistoryTeacher[]
}

model Student {
  studentId      Int           @id @default(autoincrement())
  siswa_nama     String
  siswa_nis      String
  siswa_nisn     String
  jenis_kelamin  JenisKelamin?
  siswa_slug     String
  siswa_alamat   String?
  siswa_telp     String?
  siswa_email    String?       @unique
  siswa_password String
  siswa_status   Status        @default(NEW)
  school         Sekolah?      @relation(fields: [schoolId], references: [schoolid])
  schoolId       Int?
  gradeId        Int?
  grade          Grade?        @relation(fields: [gradeId], references: [gradeId])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Grade {
  gradeId   Int        @id @default(autoincrement())
  name      String
  level     String
  guruId    Int?
  majorId   Int?
  schoolId  Int?
  school    Sekolah?   @relation(fields: [schoolId], references: [schoolid])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Student   Student[]
  Schedule  Schedule[]
}

model Subject {
  subjectId      Int              @id @default(autoincrement())
  subjectName    String
  subjectCode    String?
  status         Status           @default(ACTIVE)
  teacherId      Int?
  teacher        Teacher?         @relation(fields: [teacherId], references: [teacherId])
  schoolId       Int?
  school         Sekolah?         @relation(fields: [schoolId], references: [schoolid])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Schedule       Schedule[]
  HistorySubject HistorySubject[]
}

model HistorySubject {
  historyId      Int              @id @default(autoincrement())
  historyOldId   Int?
  history        HistorySubject?  @relation("SelfRelation", fields: [historyOldId], references: [historyId])
  HistorySubject HistorySubject[] @relation("SelfRelation")
  subjectName    String?
  subjectCode    String?
  historyStatus  HistoryStatus?   @default(CREATED)
  historyBy      String?
  userId         Int?
  user           User?            @relation(fields: [userId], references: [userId])
  subjectId      Int
  teacherId      Int?
  teacher        Teacher?         @relation(fields: [teacherId], references: [teacherId])
  subject        Subject          @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade, onUpdate: Cascade)
  schoolId       Int?
  school         Sekolah?         @relation(fields: [schoolId], references: [schoolid])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Teacher {
  teacherId      Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  password       String
  phone          String?
  address        String?
  status         Status           @default(ACTIVE)
  schoolId       Int?
  school         Sekolah?         @relation(fields: [schoolId], references: [schoolid])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Subject        Subject[]
  Schedule       Schedule[]
  HistorySubject HistorySubject[]
  HistoryTeacher HistoryTeacher[]
}

model HistoryTeacher {
  historyId      Int              @id @default(autoincrement())
  name           String?
  email          String?          @unique
  password       String?
  phone          String?
  address        String?
  schoolId       Int?
  school         Sekolah?         @relation(fields: [schoolId], references: [schoolid])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  teacherId      Int?
  teacher        Teacher?         @relation(fields: [teacherId], references: [teacherId])
  historyStatus  HistoryStatus?   @default(CREATED)
  historyBy      String?
  userId         Int?
  user           User?            @relation(fields: [userId], references: [userId])
  historyOldId   Int?
  history        HistoryTeacher?  @relation("SelfRelation", fields: [historyOldId], references: [historyId])
  HistoryTeacher HistoryTeacher[] @relation("SelfRelation")
}

model Schedule {
  scheduleId  Int      @id @default(autoincrement())
  subjectId   Int?
  day         String?
  startTime   String?
  endTime     String?
  subject     Subject? @relation(fields: [subjectId], references: [subjectId])
  teacherId   Int?
  teacher     Teacher? @relation(fields: [teacherId], references: [teacherId])
  gradeId     Int?
  grade       Grade?   @relation(fields: [gradeId], references: [gradeId])
  schoolId    Int?
  school      Sekolah? @relation(fields: [schoolId], references: [schoolid])
  isRecurring Boolean? @default(true)
  isActive    Boolean? @default(true)
  room        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum JenisKelamin {
  LAKI_LAKI
  PEREMPUAN
}

enum SchoolType {
  SMA
  SMK
  MA
}

enum SchoolStatus {
  NEGERI
  SWASTA
}

enum Kurikulum {
  K13
  KTSP
  MERDEKA
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

enum HistoryStatus {
  CREATED
  UPDATED
  DELETED
  RESTORED
  REVERTED
}

enum Status {
  ACTIVE
  DELETED
  INACTIVE
  SUSPENDED
  NEW
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
  FAILED
  SUCCESS
}
